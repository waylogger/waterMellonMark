#include "./Matilda_window.h"
// ------------------------------------------------------------------------------------------------
Matilda_window::Matilda_window()
{

	this->set_events(Gdk::ENTER_NOTIFY_MASK | Gdk::LEAVE_NOTIFY_MASK | Gdk::BUTTON_MOTION_MASK | Gdk::KEY_PRESS_MASK);	
	// ----------------------------------------------------------------------------------------
	this->signal_key_press_event().connect(
			sigc::bind<const unsigned int>(sigc::mem_fun(*this,&Matilda_window::just_key),0)
		);	
	// ---------------------------------------------
	photos_extension 	= new std::vector<std::filesystem::path>{".jpeg",".jpg"};
	stickers_extension 	= new std::vector<std::filesystem::path>{".png"};
	stickers		= new std::vector<Gtk::EventBox*>;
	photos			= new std::vector<Gtk::EventBox*>;
	raw_photos		= new std::vector<Gtk::Image*>;
	raw_stickers		= new std::vector<Gtk::Image*>;
	// ---------------------------------------------
	//connect styles
 	this->styles = Gtk::CssProvider::create();
	std::ifstream ifs {"./view/matilda.css"};
	this->css 		= new Glib::ustring;
	while (ifs) {std::string s; std::getline(ifs,s); *this->css += s;}
	this->styles->load_from_data(*css);
	this->style_context = Gtk::StyleContext::create();	
	this->screen 		= this->get_screen();
	this->style_context->add_provider_for_screen(this->screen, styles, GTK_STYLE_PROVIDER_PRIORITY_USER);
	//window
	this->set_resizable(false);
	this->set_resize_mode(Gtk::ResizeMode::RESIZE_QUEUE);
	this->set_default_size(1920,800);
//	this->set_position(Gtk::WindowPosition::WIN_POS_CENTER);
	this->set_title("matilda_main_window");
	this->main_box			= new Gtk::Box();

	this->main_box->set_resize_mode(Gtk::ResizeMode::RESIZE_QUEUE);
	this->init_new_widget(this->main_box,"main_box",{1900,800},this);
	//left
	this->photos_window 		= new Gtk::ScrolledWindow();
	this->photos_box 		= new Gtk::Box(Gtk::Orientation::ORIENTATION_VERTICAL);
	this->photos_controls 		= new Gtk::Box;
	this->load_photos_button 	= new Gtk::Button();
	this->photos_address_entry 	= new Gtk::Entry();
	this->photos_grid		= new Gtk::Grid();
	// ---------------------------------------------
	this->init_new_widget(photos_box,"photos_box",{300,900},main_box);
		this->init_new_widget(photos_controls,"photos_controls",{100,50},photos_box);
			this->init_new_widget(photos_address_entry,"photos_address_entry",{50,50},photos_controls);
			photos_address_entry->set_text("/home/wlr/Desktop/work/waterMellonMark/assets/baseimages");
			this->init_new_widget(load_photos_button,"load_photos_button",{100,50},photos_controls);
			load_photos_button->set_label("Фото");
			load_photos_button->signal_clicked().connect(
				sigc::mem_fun(*this,&Matilda_window::choose_photos_dir));
		this->init_new_widget(photos_window,"photos_window",{0,900},photos_box);
			this->init_new_widget(photos_grid,"photos_grid",{100,1000},this->photos_window);
	//center
	this->center_box		= new Gtk::Box(Gtk::Orientation::ORIENTATION_VERTICAL);
	this->cont_draw_box		= new Gtk::Box;
	this->draw_box			= new Gtk::Fixed;
		this->draw_box->set_resize_mode(Gtk::ResizeMode::RESIZE_QUEUE);

		this->draw_box->set_border_width(0);
		listTargets.push_back( Gtk::TargetEntry("STRING")); 
		listTargets.push_back( Gtk::TargetEntry("text/plain")); 

		this->draw_box->drag_dest_set(listTargets);
		this->draw_box->signal_drag_data_received().connect(
			sigc::mem_fun(*this, &Matilda_window::central_image_drop_drag_data)
		);

	this->buttons_box		= new Gtk::Box();
	this->run_button		= new Gtk::Button("Запуск");
	this->clear_button		= new Gtk::Button("Сброс");
	this->total_clear_button	= new Gtk::Button("Общий сброс");
	this->save_button		= new Gtk::Button("Сохранение");
	this->random_button		= new Gtk::Button("Random");
	this->stickers_filters		= new Gtk::ComboBoxText;
	this->filters_text		= new Gtk::Label("overlay:",true);
	this->central_img		= new Gtk::Image();

	this->init_new_widget(this->center_box,"center_box",{1310,900},this->main_box);

	this->init_new_widget(this->cont_draw_box,"center_draw_box",{1076,650},this->center_box);
	this->init_new_widget(this->draw_box,"center_draw_box",{1076,700},this->cont_draw_box);

	margin_set(this->cont_draw_box,0);

	this->init_new_widget(this->buttons_box,"central_buttons_box",{700,50},this->center_box);
		this->init_new_widget(this->run_button,"control_button",{75,50},this->buttons_box);
		this->init_new_widget(this->random_button,"control_button",{75,50},this->buttons_box);
		this->init_new_widget(this->save_button,"control_button",{75,50},this->buttons_box);
		this->init_new_widget(this->clear_button,"control_button",{75,50},this->buttons_box);
		this->init_new_widget(this->total_clear_button,"control_button",{75,50},this->buttons_box);
		this->init_new_widget(this->filters_text,"filters_text",{100,50},this->buttons_box);
		this->init_new_widget(this->stickers_filters,"stickers_filters",{100,50},this->buttons_box);
	

		this->stickers_filters->append("random");
		this->stickers_filters->append("murphy");
		this->stickers_filters->append("screen");
		this->stickers_filters->set_active(0);

	run_button->signal_clicked().connect	
						(sigc::mem_fun(*this,&Matilda_window::run));
	save_button->signal_clicked().connect
						(sigc::mem_fun(*this,&Matilda_window::save));
	total_clear_button->signal_clicked().connect
						(sigc::mem_fun(*this,&Matilda_window::total_clear));
	clear_button->signal_clicked().connect
						(sigc::mem_fun(*this,&Matilda_window::clear));
	random_button->signal_clicked().connect
						(sigc::mem_fun(*this,&Matilda_window::random));
	stickers_filters->signal_changed().connect
						(sigc::mem_fun(*this,&Matilda_window::stickers_filters_apply));
	//right
	// ---------------------------------------------
	this->stickers_window		= new Gtk::ScrolledWindow();
	this->stickers_box		= new Gtk::Box(Gtk::Orientation::ORIENTATION_VERTICAL);
	this->stickers_controls 	= new Gtk::Box;
	this->load_stickers_button 	= new Gtk::Button();
	this->stickers_address_entry 	= new Gtk::Entry();
	this->stickers_grid		= new Gtk::Grid();
	// ---------------------------------------------
	this->init_new_widget(this->stickers_box,"stickers_box",{300,700},main_box);
		this->init_new_widget(this->stickers_controls,"stickers_controls",{250,50},stickers_box);
			this->init_new_widget(stickers_address_entry,"stickers_address_entry",{50,50},stickers_controls);
			stickers_address_entry->set_text("/home/wlr/Desktop/work/waterMellonMark/assets/marks");
			this->init_new_widget(load_stickers_button,"load_stickers_button",{100,50},stickers_controls);
			load_stickers_button->set_label("Стикеры     ");
			load_stickers_button->signal_clicked().connect(
				sigc::mem_fun(*this,&Matilda_window::choose_stickers_dir));
		this->init_new_widget(stickers_window,"stickers_window",{0,900},stickers_box);
			init_new_widget(this->stickers_grid,"stickers_grid",{100,1000},this->stickers_window);

}
// ------------------------------------------------------------------------------------------------
Matilda_window::~Matilda_window(){
	std::cerr << "Destructor is run:" << std::endl;
/*
	delete this->stickers_controls;
	delete this->load_stickers_button;
	delete this->photos_controls;
	delete this->load_photos_button;
*/

}
// ------------------------------------------------------------------------------------------------
void Matilda_window::init_new_widget( Gtk::Widget* widget, const Glib::ustring& name, const std::pair<int,int>& size, Gtk::Container* port){
	widget->set_name(name);
	widget->set_size_request(size.first,size.second);
	widget->show();
	port->add(*widget);
}
// ------------------------------------------------------------------------------------------------
void Matilda_window::init_new_widget( Gtk::Widget* widget, const Glib::ustring& name, const std::pair<int,int>& size, Gtk::Grid* port, const int pos){
	widget->set_name(name);
	widget->set_size_request(size.first,size.second);
	widget->show();
	int x = pos%2;
	int y = pos/2;
	port->attach(*widget,x,y);
}
// ------------------------------------------------------------------------------------------------
void Matilda_window::init_new_widget( Gtk::Widget* widget, const Glib::ustring& name, const std::pair<int,int>& size, Gtk::Fixed* port, const int x, const int y){
	widget->set_name(name);
	widget->set_size_request(size.first,size.second);
	widget->show();
	port->put(*widget,x,y);
}
// ------------------------------------------------------------------------------------------------
void Matilda_window::choose_photos_dir() {
	Glib::ustring inp = this->photos_address_entry->get_text();
	if (inp.size() != 0 ) {
		this->photos_read_and_place(inp,photos_grid);
		return;
	}
	Gtk::FileChooserDialog dialog("Пожалуйста, выберите папку", Gtk::FILE_CHOOSER_ACTION_SELECT_FOLDER);
	dialog.set_transient_for(*this);
	dialog.add_button("Отмена",Gtk::RESPONSE_CANCEL);	
	dialog.add_button("Выбрать",Gtk::RESPONSE_OK);
	int result = dialog.run();
	if (result == Gtk::RESPONSE_OK) { 
		const Glib::ustring path = dialog.get_filename();
		this->photos_address_entry->set_text(path);
		this->photos_read_and_place(path,photos_grid);
}
}
// ------------------------------------------------------------------------------------------------
void Matilda_window::choose_stickers_dir() {

	Glib::ustring inp = this->stickers_address_entry->get_text();
	if (inp.size() != 0 ) {
		this->stickers_read_and_place(inp,photos_grid);
		return;
	}
	Gtk::FileChooserDialog dialog("Пожалуйста, выберите папку", Gtk::FILE_CHOOSER_ACTION_SELECT_FOLDER);
	dialog.set_transient_for(*this);
	dialog.add_button("Отмена",Gtk::RESPONSE_CANCEL);	
	dialog.add_button("Выбрать",Gtk::RESPONSE_OK);
	int result = dialog.run();
	if (result == Gtk::RESPONSE_OK) { 
		const Glib::ustring path = dialog.get_filename();
		this->stickers_address_entry->set_text(path);
		this->stickers_read_and_place(path,stickers_grid);
}
}
// ------------------------------------------------------------------------------------------------
void Matilda_window::stickers_read_and_place(const Glib::ustring& path, Gtk::Grid* grid){
	for (auto& p: *this->stickers) {p->hide(); delete p;}
	this->stickers->erase(stickers->begin(),stickers->end());


	for (auto& p: *this->raw_stickers) {p->hide(); delete p;}
	this->raw_stickers->erase(raw_stickers->begin(),raw_stickers->end());

	int inx = 0;
    for(auto& p: std::filesystem::directory_iterator(std::string(path))){
		if (std::find(this->stickers_extension->begin(), this->stickers_extension->end(),p.path().extension()) == this->stickers_extension->end()) continue;
		Gtk::Image* img = new Gtk::Image(p.path());	
		auto pixbuf = img->get_pixbuf();
		auto newbuf = pixbuf->scale_simple(125,125,Gdk::InterpType::INTERP_NEAREST);
		Gtk::Image* nimg = new Gtk::Image(newbuf);
		Gtk::Image* simg = new Gtk::Image(newbuf);
		nimg->show();
		Gtk::EventBox* eb = new Gtk::EventBox;	
		Gtk::EventBox* seb = new Gtk::EventBox;

		eb->set_events(Gdk::ENTER_NOTIFY_MASK | Gdk::LEAVE_NOTIFY_MASK | Gdk::BUTTON_MOTION_MASK | Gdk::KEY_PRESS_MASK);
		seb->set_events(Gdk::ENTER_NOTIFY_MASK | Gdk::LEAVE_NOTIFY_MASK | Gdk::BUTTON_MOTION_MASK | Gdk::KEY_PRESS_MASK);
		eb->drag_source_set(listTargets);
		seb->drag_source_set(listTargets);


		eb->signal_drag_data_get().connect(
			sigc::bind<const unsigned int>(sigc::mem_fun(*this,&Matilda_window::stickers_drag_data_set),inx)
		);	
		seb->signal_drag_data_get().connect(
			sigc::bind<const unsigned int>(sigc::mem_fun(*this,&Matilda_window::stickers_drag_data_set),inx)
		);	
		seb->signal_button_press_event().connect(
			sigc::bind<const unsigned int>(sigc::mem_fun(*this,&Matilda_window::delete_sticker),inx)
		);


		this->init_new_widget(eb,"stickers_grid_eventbox",{125,125},this->stickers_grid,this->stickers->size());
		this->init_new_widget(nimg,"stickers_grid_img",{0,0},eb);
		this->init_new_widget(simg,"stickers_grid_img",{125,125},seb);
		nimg->set_opacity(0.9);
		//---------------------------------------------------------------------------------
		eb->signal_enter_notify_event().connect (
			//binding signal handlers
			sigc::bind<const unsigned int>(sigc::mem_fun(*this,&Matilda_window::enter_crossing_stickers),inx)
		);
		eb->signal_leave_notify_event().connect(
			sigc::bind<const unsigned int>(sigc::mem_fun(*this,&Matilda_window::leave_crossing_stickers),inx)
		);
/*
		eb->signal_button_press_event().connect(
			sigc::bind<const unsigned int>(sigc::mem_fun(*this,&Matilda_window::photo_activate),inx)
		);
*/
		//---------------------------------------------------------------------------------
		eb->set_margin_right(5);
		eb->set_margin_left(5);
		eb->set_margin_top(5);
		eb->set_margin_bottom(5);
		//----------------------------------------
		stickers->push_back(eb);
		small_stickers.push_back(seb);
		raw_stickers->push_back(img);
		++inx;
	}
}
// ------------------------------------------------------------------------------------------------
void Matilda_window::photos_read_and_place(const Glib::ustring& path, Gtk::Grid* grid){
	for ( unsigned int i = 0; i < photos->size(); ++i) {
		Gtk::EventBox* eb = (*photos)[i];
		delete eb;	
	}
	
	for (auto& a: *raw_photos) { delete a; }
	this->photos->erase(photos->begin(),photos->end());
	this->photos->erase(photos->begin(),photos->end());
	this->raw_photos->erase(raw_photos->begin(),raw_photos->end());

	unsigned int inx = 0;
    for(auto& p: std::filesystem::directory_iterator(std::string(path))){
		if (std::find(this->photos_extension->begin(), this->photos_extension->end(),p.path().extension()) == this->photos_extension->end()) continue;
		Gtk::Image* img = new Gtk::Image(p.path());	
		auto pixbuf = img->get_pixbuf();
		auto newbuf = pixbuf->scale_simple(135,135,Gdk::InterpType::INTERP_NEAREST);
		Gtk::Image* nimg = new Gtk::Image(newbuf);
		nimg->set_opacity(0.9);
		nimg->show();
		Gtk::EventBox* eb = new Gtk::EventBox;	
		eb->set_events(Gdk::ENTER_NOTIFY_MASK | Gdk::LEAVE_NOTIFY_MASK | Gdk::BUTTON_MOTION_MASK);
		
		//nimg->set_state_flags(Gtk::STATE_FLAG_PRELIGHT);
		this->init_new_widget(eb,"photos_grid_eventbox",{125,125},this->photos_grid,this->photos->size());
		this->init_new_widget(nimg,"photos_grid_img",{0,0},eb);
		//---------------------------------------------------------------------------------
		eb->signal_enter_notify_event().connect (
			//binding signal handlers
			sigc::bind<const unsigned int>(sigc::mem_fun(*this,&Matilda_window::enter_crossing_photos),inx)

		);
		eb->signal_leave_notify_event().connect(
			sigc::bind<const unsigned int>(sigc::mem_fun(*this,&Matilda_window::leave_crossing_photos),inx)
		);

		eb->signal_button_press_event().connect(
			sigc::bind<const unsigned int>(sigc::mem_fun(*this,&Matilda_window::photo_activate),inx)
		);
		//---------------------------------------------------------------------------------
		margin_set(eb,5);

		photos->push_back(eb);
		raw_photos->push_back(img);
		inx++;
	}
}


//-------------------------------------------------------------------------------------------------
void margin_set(Gtk::Widget* widget, const int margin){
		widget->set_margin_right(5);
		widget->set_margin_left(5);
		widget->set_margin_top(5);
		widget->set_margin_bottom(5);

}
//-------------------------------------------------------------------------------------------------
bool is_set(const guint& state, const unsigned int set){
	std::cout << set << '\n';
	std::cout << ( state & set ) << '\n';
	if ( (state & set ) == set ) return true;
	return false;
}


